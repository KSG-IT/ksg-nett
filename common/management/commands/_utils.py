from django.utils import timezone
import datetime
from common.util import chose_random_element
from economy.models import SociProduct, ProductOrder, SociBankAccount, Transfer, Deposit
from common.tests.test_util import random_datetime
from users.models import User


def create_semester_dates(years=3):
    now = datetime.date.today()
    january_this_year = timezone.make_aware(
        timezone.datetime(year=now.year, month=2, day=12)
    )
    cursor = january_this_year - timezone.timedelta(days=365 * years)
    semester_offset = timezone.timedelta(days=184)
    dates = []
    while cursor < january_this_year:
        dates.append(cursor)
        cursor += semester_offset

    return dates


class EconomicActivityType:
    TRANSFER = "transfer"
    DEPOSIT = "deposit"
    PURCHASE = "purchase"


def create_random_economy_activity(user, economic_activity, soci_session=None):
    amount_choices = [30, 120, 180, 250, 340]
    now = timezone.make_aware(timezone.datetime.now())
    last_week = now - timezone.timedelta(days=7)
    timestamp = random_datetime(last_week, now)

    if economic_activity == EconomicActivityType.TRANSFER:
        random_bank_account = get_random_model_objects(SociBankAccount)
        transfer_amount = chose_random_element(amount_choices)
        Transfer.objects.create(
            source=user.bank_account,
            destination=random_bank_account,
            amount=transfer_amount,
        )

    elif economic_activity == EconomicActivityType.DEPOSIT:
        random_user = get_random_model_objects(User)
        signed_off_at = random_datetime(timestamp, now)
        deposit_amount = chose_random_element(amount_choices)
        Deposit.objects.create(
            amount=deposit_amount,
            signed_off_by=random_user,
            account=user.bank_account,
            signed_off_time=signed_off_at,
            created_at=timestamp,
            description="Autogenerated",
        )

    elif economic_activity == EconomicActivityType.PURCHASE:
        if not soci_session:
            raise ValueError("SociSession must be defined to create product order")
        order_size_choices = range(1, 8)
        order_size = chose_random_element(order_size_choices)
        product = SociProduct.objects.all().order_by("?").first()
        ProductOrder.objects.create(
            order_size=order_size,
            product=product,
            session=soci_session,
            purchased_at=timestamp,
            source=user.bank_account,
        )


def get_random_model_objects(model, number_of_objects=None):
    randomized_order = model.objects.all().order_by("?")
    if not number_of_objects:
        return randomized_order.first()

    return randomized_order[0:number_of_objects]

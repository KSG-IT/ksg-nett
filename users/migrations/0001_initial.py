# Generated by Django 3.2.16 on 2022-12-07 12:14

from django.conf import settings
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import users.managers


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ("auth", "0012_alter_user_first_name_max_length"),
    ]

    operations = [
        migrations.CreateModel(
            name="User",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("password", models.CharField(max_length=128, verbose_name="password")),
                (
                    "last_login",
                    models.DateTimeField(
                        blank=True, null=True, verbose_name="last login"
                    ),
                ),
                (
                    "is_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Designates that this user has all permissions without explicitly assigning them.",
                        verbose_name="superuser status",
                    ),
                ),
                (
                    "username",
                    models.CharField(
                        error_messages={
                            "unique": "A user with that username already exists."
                        },
                        help_text="Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.",
                        max_length=150,
                        unique=True,
                        validators=[
                            django.contrib.auth.validators.UnicodeUsernameValidator()
                        ],
                        verbose_name="username",
                    ),
                ),
                (
                    "first_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="first name"
                    ),
                ),
                (
                    "last_name",
                    models.CharField(
                        blank=True, max_length=150, verbose_name="last name"
                    ),
                ),
                (
                    "is_staff",
                    models.BooleanField(
                        default=False,
                        help_text="Designates whether the user can log into this admin site.",
                        verbose_name="staff status",
                    ),
                ),
                (
                    "is_active",
                    models.BooleanField(
                        default=True,
                        help_text="Designates whether this user should be treated as active. Unselect this instead of deleting accounts.",
                        verbose_name="active",
                    ),
                ),
                (
                    "date_joined",
                    models.DateTimeField(
                        default=django.utils.timezone.now, verbose_name="date joined"
                    ),
                ),
                (
                    "nickname",
                    models.CharField(
                        blank=True, default=None, max_length=64, null=True
                    ),
                ),
                ("email", models.EmailField(max_length=254, unique=True)),
                ("date_of_birth", models.DateField(blank=True, null=True)),
                ("study", models.CharField(blank=True, default="", max_length=100)),
                (
                    "profile_image",
                    models.FileField(blank=True, null=True, upload_to="profiles/"),
                ),
                ("phone", models.CharField(blank=True, default="", max_length=50)),
                (
                    "study_address",
                    models.CharField(blank=True, default="", max_length=100),
                ),
                ("home_town", models.CharField(blank=True, default="", max_length=100)),
                ("start_ksg", models.DateField(auto_now_add=True)),
                ("biography", models.TextField(blank=True, default="", max_length=200)),
                ("in_relationship", models.BooleanField(default=False, null=True)),
                ("migrated_from_sg", models.BooleanField(default=False)),
                ("anonymize_in_made_out_map", models.BooleanField(default=True)),
                ("sg_id", models.IntegerField(blank=True, null=True)),
                ("requires_migration_wizard", models.BooleanField(default=False)),
                (
                    "ical_token",
                    models.CharField(
                        blank=True, default=None, max_length=128, null=True, unique=True
                    ),
                ),
            ],
            options={
                "verbose_name": "user",
                "verbose_name_plural": "users",
                "abstract": False,
            },
            managers=[
                ("objects", django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name="Allergy",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=32)),
            ],
            options={
                "verbose_name_plural": "Allergies",
                "default_related_name": "allergies",
            },
        ),
        migrations.CreateModel(
            name="UserType",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("name", models.CharField(max_length=100)),
                ("description", models.TextField(blank=True, default="")),
                (
                    "requires_superuser",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this user type requires a superuser to be granted to another user.",
                    ),
                ),
                (
                    "requires_self",
                    models.BooleanField(
                        default=False,
                        help_text="Whether this user type requires to have the permissions of the user type to grant them to another user.",
                    ),
                ),
                (
                    "permissions",
                    models.ManyToManyField(
                        blank=True,
                        help_text="The permissions this user type grants.",
                        to="auth.Permission",
                    ),
                ),
                (
                    "users",
                    models.ManyToManyField(
                        help_text="The users having this user type.",
                        related_name="user_types",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User types",
                "ordering": ["name"],
            },
        ),
        migrations.CreateModel(
            name="UserTypeLogEntry",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("timestamp", models.DateTimeField(auto_now_add=True)),
                (
                    "action",
                    models.CharField(
                        choices=[("ADD", "Add"), ("REMOVE", "Remove")], max_length=10
                    ),
                ),
                (
                    "done_by",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_type_log_entries",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="user_type_log",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_type",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="changelog",
                        to="users.usertype",
                    ),
                ),
            ],
            options={
                "verbose_name_plural": "User type log entries",
                "ordering": ["-timestamp"],
            },
        ),
        migrations.CreateModel(
            name="UsersHaveMadeOut",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("created", models.DateTimeField(auto_now_add=True)),
                ("modified", models.DateTimeField(auto_now=True)),
                (
                    "user_one",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="made_out_with_left_side",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
                (
                    "user_two",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        related_name="made_out_with_right_side",
                        to=settings.AUTH_USER_MODEL,
                    ),
                ),
            ],
            managers=[
                ("objects", users.managers.UsersHaveMadeOutManager()),
            ],
        ),
        migrations.AddField(
            model_name="user",
            name="allergies",
            field=models.ManyToManyField(
                blank=True, related_name="users", to="users.Allergy"
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="groups",
            field=models.ManyToManyField(
                blank=True,
                help_text="The groups this user belongs to. A user will get all permissions granted to each of their groups.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Group",
                verbose_name="groups",
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="have_made_out_with",
            field=models.ManyToManyField(
                through="users.UsersHaveMadeOut", to=settings.AUTH_USER_MODEL
            ),
        ),
        migrations.AddField(
            model_name="user",
            name="user_permissions",
            field=models.ManyToManyField(
                blank=True,
                help_text="Specific permissions for this user.",
                related_name="user_set",
                related_query_name="user",
                to="auth.Permission",
                verbose_name="user permissions",
            ),
        ),
        migrations.AddIndex(
            model_name="usershavemadeout",
            index=models.Index(
                fields=["user_one", "user_two"], name="users_users_user_on_be886d_idx"
            ),
        ),
        migrations.AddIndex(
            model_name="usershavemadeout",
            index=models.Index(
                fields=["user_two", "user_one"], name="users_users_user_tw_8b64d8_idx"
            ),
        ),
    ]
